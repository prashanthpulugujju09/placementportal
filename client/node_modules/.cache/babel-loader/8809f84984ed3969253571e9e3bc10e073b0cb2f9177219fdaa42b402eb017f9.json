{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport postActionTypes from './postActionTypes';\nimport { jobRequest } from '../../httpRequests';\nfunction removePost(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    const endpoint = 'posts/delete';\n    const response = yield jobRequest(payload.data, payload.token, endpoint, 'POST');\n    if (response.status === 'ok') {\n      yield put({\n        type: postActionTypes.SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: postActionTypes.FAILED\n      });\n    }\n  }();\n}\nfunction newPost(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    const endpoint = 'posts/create';\n    const response = yield jobRequest(payload.data, payload.token, endpoint, 'POST');\n    if (response.status === 'ok') {\n      yield put({\n        type: postActionTypes.SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: postActionTypes.FAILED\n      });\n    }\n  }();\n}\nfunction getPosts(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    const endpoint = 'posts/';\n    const response = yield jobRequest({}, payload.token, endpoint, 'GET');\n    if (response.status === 'ok') {\n      yield put({\n        type: postActionTypes.SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: postActionTypes.FAILED\n      });\n    }\n  }();\n}\nfunction updatePost(_ref4) {\n  let {\n    payload\n  } = _ref4;\n  return function* () {\n    const endpoint = 'posts/edit';\n    const response = yield jobRequest(payload.data, payload.token, endpoint, 'POST');\n    if (response.status === 'ok') {\n      yield put({\n        type: postActionTypes.SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: postActionTypes.FAILED\n      });\n    }\n  }();\n}\nexport function* deletePost() {\n  yield takeLatest(postActionTypes.DELETE_POST_START, removePost);\n}\nexport function* createPost() {\n  yield takeLatest(postActionTypes.CREATE_POST_START, newPost);\n}\nexport function* editPost() {\n  yield takeLatest(postActionTypes.UPDATE_POST_START, updatePost);\n}\nexport function* fetchPosts() {\n  yield takeLatest(postActionTypes.FETCH_ALL_POSTS_START, getPosts);\n}\nexport default function* postSaga() {\n  yield all([call(deletePost), call(createPost), call(editPost), call(fetchPosts)]);\n}","map":{"version":3,"names":["all","call","put","takeLatest","postActionTypes","jobRequest","removePost","_ref","payload","endpoint","response","data","token","status","type","SUCCESS","FAILED","newPost","_ref2","getPosts","_ref3","updatePost","_ref4","deletePost","DELETE_POST_START","createPost","CREATE_POST_START","editPost","UPDATE_POST_START","fetchPosts","FETCH_ALL_POSTS_START","postSaga"],"sources":["C:/Users/Prashanth/Desktop/placement-management-system/client/src/redux/post/postSaga.js"],"sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport postActionTypes from './postActionTypes';\nimport { jobRequest } from '../../httpRequests';\n\n\nfunction* removePost({ payload }) {\n    const endpoint = 'posts/delete';\n    const response = yield jobRequest(payload.data,payload.token,endpoint,'POST');\n    if (response.status === 'ok') {\n        yield put({ type: postActionTypes.SUCCESS, payload: response.data });\n    }\n    else {\n        yield put({ type: postActionTypes.FAILED });\n    }\n}\n\nfunction* newPost({ payload }) {\n    const endpoint = 'posts/create';\n    const response = yield jobRequest(payload.data,payload.token,endpoint,'POST');\n    if (response.status === 'ok') {\n        yield put({ type: postActionTypes.SUCCESS, payload: response.data });\n    }\n    else {\n        yield put({ type: postActionTypes.FAILED });\n    }\n}\n\nfunction* getPosts({payload}){\n    const endpoint = 'posts/';\n    const response = yield jobRequest({},payload.token,endpoint,'GET');\n    if (response.status === 'ok') {\n        yield put({ type: postActionTypes.SUCCESS, payload: response.data });\n    }\n    else {\n        yield put({ type: postActionTypes.FAILED });\n    }\n}\n\nfunction* updatePost({payload}){\n    const endpoint = 'posts/edit';\n    const response = yield jobRequest(payload.data,payload.token,endpoint,'POST');\n    if (response.status === 'ok') {\n        yield put({ type: postActionTypes.SUCCESS, payload: response.data });\n    }\n    else {\n        yield put({ type: postActionTypes.FAILED });\n    }\n}\n\nexport function* deletePost() {\n    yield takeLatest(postActionTypes.DELETE_POST_START, removePost);\n}\n\nexport function* createPost() {\n    yield takeLatest(postActionTypes.CREATE_POST_START, newPost);\n}\n\nexport function* editPost(){\n    yield takeLatest(postActionTypes.UPDATE_POST_START,updatePost);\n}\n\nexport function* fetchPosts(){\n    yield takeLatest(postActionTypes.FETCH_ALL_POSTS_START,getPosts);\n}\n\nexport default function* postSaga() {\n    yield all([\n        call(deletePost),\n        call(createPost),\n        call(editPost),\n        call(fetchPosts)\n    ]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}