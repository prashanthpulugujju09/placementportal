{"ast":null,"code":"import logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './rootSaga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage/session';\nimport userReducer from './user/userSlice';\nimport userActionTypes from './user/userActionTypes';\nimport jobReducer from './job/jobSlice';\nimport postReducer from './post/postSlice';\nconst sagaMiddleware = createSagaMiddleware();\nconst combinedReducers = combineReducers({\n  user: userReducer,\n  job: jobReducer,\n  posts: postReducer\n});\nconst rootReducer = (state, action) => {\n  if (action.type === userActionTypes.SIGN_OUT) {\n    state = undefined;\n    storage.removeItem('persist:root');\n  }\n  return combinedReducers(state, action);\n};\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst store = configureStore({\n  middleware: [sagaMiddleware, logger],\n  reducer: persistedReducer\n});\nsagaMiddleware.run(rootSaga);\nconst persistor = persistStore(store);\nexport { store, persistor };","map":{"version":3,"names":["logger","createSagaMiddleware","rootSaga","persistStore","persistReducer","combineReducers","configureStore","storage","userReducer","userActionTypes","jobReducer","postReducer","sagaMiddleware","combinedReducers","user","job","posts","rootReducer","state","action","type","SIGN_OUT","undefined","removeItem","persistConfig","key","persistedReducer","store","middleware","reducer","run","persistor"],"sources":["C:/Users/Prashanth/Desktop/Prashu/placement-management-system/client/src/redux/store.js"],"sourcesContent":["import logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './rootSaga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport {combineReducers,configureStore} from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage/session';\nimport userReducer from './user/userSlice';\nimport userActionTypes from './user/userActionTypes';\nimport jobReducer from './job/jobSlice';\nimport postReducer from './post/postSlice';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst combinedReducers = combineReducers({\n    user: userReducer,\n    job: jobReducer,\n    posts:postReducer\n});\n\nconst rootReducer = (state, action) => {\n    if (action.type === userActionTypes.SIGN_OUT) {\n        state = undefined;\n        storage.removeItem('persist:root');\n    }\n    return combinedReducers(state, action);\n}\n\nconst persistConfig = {\n    key: 'root',\n    storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n    middleware: [sagaMiddleware,logger],\n    reducer: persistedReducer\n});\n\n\nsagaMiddleware.run(rootSaga);\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };"],"mappings":"AAAA,OAAOA,MAAM,MAAM,cAAc;AACjC,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,SAAQC,eAAe,EAACC,cAAc,QAAO,kBAAkB;AAC/D,OAAOC,OAAO,MAAM,mCAAmC;AACvD,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,eAAe,MAAM,wBAAwB;AACpD,OAAOC,UAAU,MAAM,gBAAgB;AACvC,OAAOC,WAAW,MAAM,kBAAkB;AAE1C,MAAMC,cAAc,GAAGX,oBAAoB,CAAC,CAAC;AAE7C,MAAMY,gBAAgB,GAAGR,eAAe,CAAC;EACrCS,IAAI,EAAEN,WAAW;EACjBO,GAAG,EAAEL,UAAU;EACfM,KAAK,EAACL;AACV,CAAC,CAAC;AAEF,MAAMM,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACnC,IAAIA,MAAM,CAACC,IAAI,KAAKX,eAAe,CAACY,QAAQ,EAAE;IAC1CH,KAAK,GAAGI,SAAS;IACjBf,OAAO,CAACgB,UAAU,CAAC,cAAc,CAAC;EACtC;EACA,OAAOV,gBAAgB,CAACK,KAAK,EAAEC,MAAM,CAAC;AAC1C,CAAC;AAED,MAAMK,aAAa,GAAG;EAClBC,GAAG,EAAE,MAAM;EACXlB;AACJ,CAAC;AAED,MAAMmB,gBAAgB,GAAGtB,cAAc,CAACoB,aAAa,EAAEP,WAAW,CAAC;AAEnE,MAAMU,KAAK,GAAGrB,cAAc,CAAC;EACzBsB,UAAU,EAAE,CAAChB,cAAc,EAACZ,MAAM,CAAC;EACnC6B,OAAO,EAAEH;AACb,CAAC,CAAC;AAGFd,cAAc,CAACkB,GAAG,CAAC5B,QAAQ,CAAC;AAE5B,MAAM6B,SAAS,GAAG5B,YAAY,CAACwB,KAAK,CAAC;AAErC,SAASA,KAAK,EAAEI,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}