{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport jobActionTypes from './jobActionTypes';\nimport { jobRequest } from '../../httpRequests';\nfunction deleteJobProfile(_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    const endpoint = 'jobprofiles/delete';\n    const response = yield jobRequest(payload.data, payload.token, endpoint, 'POST');\n    if (response.status === 'ok') {\n      yield put({\n        type: jobActionTypes.SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: jobActionTypes.FAILED\n      });\n    }\n  }();\n}\nfunction createJobProfile(_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    const endpoint = 'jobprofiles/create';\n    const response = yield jobRequest(payload.data, payload.token, endpoint, 'POST');\n    if (response.status === 'ok') {\n      yield put({\n        type: jobActionTypes.SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: jobActionTypes.FAILED\n      });\n    }\n  }();\n}\nfunction getJobs(_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    const endpoint = 'jobprofiles/';\n    const response = yield jobRequest({}, payload.token, endpoint, 'GET');\n    if (response.status === 'ok') {\n      yield put({\n        type: jobActionTypes.SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: jobActionTypes.FAILED\n      });\n    }\n  }();\n}\nfunction updateJob(_ref4) {\n  let {\n    payload\n  } = _ref4;\n  return function* () {\n    const endpoint = 'jobprofiles/edit';\n    const response = yield jobRequest(payload.data, payload.token, endpoint, 'POST');\n    if (response.status === 'ok') {\n      yield put({\n        type: jobActionTypes.SUCCESS,\n        payload: response.data\n      });\n    } else {\n      yield put({\n        type: jobActionTypes.FAILED\n      });\n    }\n  }();\n}\nexport function* deleteJob() {\n  yield takeLatest(jobActionTypes.DELETE_JOB_START, deleteJobProfile);\n}\nexport function* createJob() {\n  yield takeLatest(jobActionTypes.CREATE_JOB_START, createJobProfile);\n}\nexport function* editJob() {\n  yield takeLatest(jobActionTypes.UPDATE_JOB_START, updateJob);\n}\nexport function* fetchJobProfiles() {\n  yield takeLatest(jobActionTypes.FETCH_ALL_JOBS_START, getJobs);\n}\nexport default function* jobSaga() {\n  yield all([call(deleteJob), call(createJob), call(editJob), call(fetchJobProfiles)]);\n}","map":{"version":3,"names":["all","call","put","takeLatest","jobActionTypes","jobRequest","deleteJobProfile","_ref","payload","endpoint","response","data","token","status","type","SUCCESS","FAILED","createJobProfile","_ref2","getJobs","_ref3","updateJob","_ref4","deleteJob","DELETE_JOB_START","createJob","CREATE_JOB_START","editJob","UPDATE_JOB_START","fetchJobProfiles","FETCH_ALL_JOBS_START","jobSaga"],"sources":["C:/Users/Prashanth/Desktop/placement-management-system/client/src/redux/job/jobSaga.js"],"sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport jobActionTypes from './jobActionTypes';\nimport { jobRequest } from '../../httpRequests';\n\n\nfunction* deleteJobProfile({ payload }) {\n    const endpoint = 'jobprofiles/delete';\n    const response = yield jobRequest(payload.data,payload.token,endpoint,'POST');\n    if (response.status === 'ok') {\n        yield put({ type: jobActionTypes.SUCCESS, payload: response.data });\n    }\n    else {\n        yield put({ type: jobActionTypes.FAILED });\n    }\n}\n\nfunction* createJobProfile({ payload }) {\n    const endpoint = 'jobprofiles/create';\n    const response = yield jobRequest(payload.data,payload.token,endpoint,'POST');\n    if (response.status === 'ok') {\n        yield put({ type: jobActionTypes.SUCCESS, payload: response.data });\n    }\n    else {\n        yield put({ type: jobActionTypes.FAILED });\n    }\n}\n\nfunction* getJobs({payload}){\n    const endpoint = 'jobprofiles/';\n    const response = yield jobRequest({},payload.token,endpoint,'GET');\n    if (response.status === 'ok') {\n        yield put({ type: jobActionTypes.SUCCESS, payload: response.data });\n    }\n    else {\n        yield put({ type: jobActionTypes.FAILED });\n    }\n}\n\nfunction* updateJob({payload}){\n    const endpoint = 'jobprofiles/edit';\n    const response = yield jobRequest(payload.data,payload.token,endpoint,'POST');\n    if (response.status === 'ok') {\n        yield put({ type: jobActionTypes.SUCCESS, payload: response.data });\n    }\n    else {\n        yield put({ type: jobActionTypes.FAILED });\n    }\n}\n\nexport function* deleteJob() {\n    yield takeLatest(jobActionTypes.DELETE_JOB_START, deleteJobProfile);\n}\n\nexport function* createJob() {\n    yield takeLatest(jobActionTypes.CREATE_JOB_START, createJobProfile);\n}\n\nexport function* editJob(){\n    yield takeLatest(jobActionTypes.UPDATE_JOB_START,updateJob);\n}\n\nexport function* fetchJobProfiles(){\n    yield takeLatest(jobActionTypes.FETCH_ALL_JOBS_START,getJobs);\n}\n\nexport default function* jobSaga() {\n    yield all([\n        call(deleteJob),\n        call(createJob),\n        call(editJob),\n        call(fetchJobProfiles)\n    ]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}