{"ast":null,"code":"import axios from 'axios';\nconst BASE_URI = 'http://localhost:5000/api/';\nconst INVALID_DATA = {\n  status: 'error',\n  message: 'missing or invalid data'\n};\nfunction areRegisterInputsValid(_ref) {\n  let {\n    email,\n    password,\n    repassword\n  } = _ref;\n  if (!email || !password || !repassword) {\n    return false;\n  }\n  return true;\n}\nfunction areLoginInputsValid(_ref2) {\n  let {\n    email,\n    password\n  } = _ref2;\n  if (!email || !password) {\n    return false;\n  }\n  return true;\n}\nfunction isPasswordValid(password, repassword) {\n  return password === repassword;\n}\nasync function serverRequest(url, method, data, headers) {\n  try {\n    const response = await axios({\n      url,\n      method,\n      data,\n      headers\n    });\n    const responseData = {\n      status: 'ok',\n      data: response.data.data,\n      message: response.data.message\n    };\n    return responseData;\n  } catch (error) {\n    console.log(error);\n    if (error.response.data) {\n      const {\n        message\n      } = error.response.data;\n      const responseData = {\n        status: 'error',\n        message: message\n      };\n      return responseData;\n    }\n    return {\n      status: 'error',\n      message: 'connection error'\n    };\n  }\n}\nexport const registerUser = async inputData => {\n  const {\n    password,\n    repassword\n  } = inputData;\n  const inputsValidity = areRegisterInputsValid(inputData);\n  const passwordMatch = isPasswordValid(password, repassword);\n  if (!inputsValidity || !passwordMatch) {\n    return INVALID_DATA;\n  }\n  const url = BASE_URI + 'user';\n  const method = 'POST';\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const response = await serverRequest(url, method, inputData, headers);\n  return response;\n};\nexport const loginUser = async inputData => {\n  const inputsValidity = areLoginInputsValid(inputData);\n  if (!inputsValidity) {\n    return INVALID_DATA;\n  }\n  const method = 'POST';\n  const url = BASE_URI + 'user/login';\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const response = await serverRequest(url, method, inputData, headers);\n  return response;\n};\nexport const editUserDetails = async (inputData, token) => {\n  console.log(inputData);\n  console.log(token);\n  const method = 'POST';\n  const url = BASE_URI + 'user/edit';\n  const headers = {\n    'Content-Type': 'application/json',\n    authorization: `Bearer ${token}`\n  };\n  const response = await serverRequest(url, method, inputData, headers);\n  return response;\n};\nexport const changeCC = async (inputData, token) => {\n  const method = 'POST';\n  const url = BASE_URI + 'user/role';\n  const headers = {\n    'Content-Type': 'application/json',\n    'authorization': `Bearer ${token}`\n  };\n  const response = await serverRequest(url, method, inputData, headers);\n  return response;\n};\nexport const fetchCurrentUser = async token => {\n  const method = 'GET';\n  const url = BASE_URI + 'user';\n  const headers = {\n    'Content-Type': 'application/json',\n    'authorization': `Bearer ${token}`\n  };\n  const response = await serverRequest(url, method, {}, headers);\n  return response;\n};\nexport const getAllJobs = async (inputData, token) => {\n  const method = 'GET';\n  const url = BASE_URI + 'posts/';\n  const headers = {\n    'Content-Type': 'application/json',\n    'authorization': `Bearer ${token}`\n  };\n  const response = await serverRequest(url, method, inputData, headers);\n  return response;\n};\nexport const jobRequest = async (inputData, token, endpoint, method) => {\n  const url = BASE_URI + endpoint;\n  const headers = {\n    'Content-Type': 'application/json',\n    'authorization': `Bearer ${token}`\n  };\n  const response = await serverRequest(url, method, inputData, headers);\n  return response;\n};\nexport const uploadResume = async (inputData, token, endpoint) => {\n  const url = BASE_URI + endpoint;\n  const method = 'POST';\n  const headers = {\n    'Content-Type': 'application/json',\n    'authorization': `Bearer ${token}`\n  };\n  const response = await serverRequest(url, method, inputData, headers);\n  return response;\n};","map":{"version":3,"names":["axios","BASE_URI","INVALID_DATA","status","message","areRegisterInputsValid","_ref","email","password","repassword","areLoginInputsValid","_ref2","isPasswordValid","serverRequest","url","method","data","headers","response","responseData","error","console","log","registerUser","inputData","inputsValidity","passwordMatch","loginUser","editUserDetails","token","authorization","changeCC","fetchCurrentUser","getAllJobs","jobRequest","endpoint","uploadResume"],"sources":["C:/Users/Prashanth/Desktop/placement-management-system/client/src/httpRequests.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URI = 'http://localhost:5000/api/';\nconst INVALID_DATA = {\n    status: 'error',\n    message: 'missing or invalid data'\n};\n\nfunction areRegisterInputsValid({ email, password, repassword }) {\n    if (!email || !password || !repassword ) {\n        return false;\n    }\n    return true;\n}\n\nfunction areLoginInputsValid({ email, password }) {\n    if (!email || !password) {\n        return false;\n    }\n    return true;\n}\n\nfunction isPasswordValid(password, repassword) {\n    return password === repassword;\n}\n\nasync function serverRequest(url, method, data, headers) {\n    try {\n        const response = await axios({\n            url,\n            method,\n            data,\n            headers\n        });\n        const responseData = {\n            status: 'ok',\n            data: response.data.data,\n            message: response.data.message\n        }\n        return responseData;\n    }\n    catch (error) {\n        console.log(error);\n        if (error.response.data) {\n            const { message } = error.response.data;\n            const responseData = {\n                status: 'error',\n                message: message\n            }\n            return responseData;\n        }\n        return {\n            status: 'error',\n            message: 'connection error'\n        };\n    }\n}\n\nexport const registerUser = async (inputData) => {\n    const { password, repassword } = inputData;\n    const inputsValidity = areRegisterInputsValid(inputData);\n    const passwordMatch = isPasswordValid(password, repassword);\n    if (!inputsValidity || !passwordMatch) {\n        return INVALID_DATA;\n    }\n    const url = BASE_URI + 'user';\n    const method = 'POST';\n    const headers = {\n        'Content-Type': 'application/json'\n    }\n    const response = await serverRequest(url, method, inputData, headers);\n    return response;\n}\n\nexport const loginUser = async (inputData) => {\n    const inputsValidity = areLoginInputsValid(inputData);\n    if (!inputsValidity) {\n        return INVALID_DATA;\n    }\n    const method = 'POST';\n    const url = BASE_URI + 'user/login';\n    const headers = {\n        'Content-Type': 'application/json'\n    };\n    const response = await serverRequest(url, method, inputData, headers);\n    return response;\n}\n\nexport const editUserDetails = async(inputData,token)=>{\n    console.log(inputData);\n    console.log(token);\n    const method = 'POST';\n    const url = BASE_URI+'user/edit';\n    const headers = {\n        'Content-Type': 'application/json',\n        authorization: `Bearer ${token}`\n    };\n    const response = await serverRequest(url, method, inputData, headers);\n    return response;\n}\n\nexport const changeCC = async(inputData,token)=>{\n    const method = 'POST';\n    const url = BASE_URI+'user/role';\n    const headers = {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n    };\n    const response = await serverRequest(url, method, inputData, headers);\n    return response;\n}\n\nexport const fetchCurrentUser = async(token)=>{\n    const method = 'GET';\n    const url = BASE_URI+'user';\n    const headers = {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n    };\n    const response = await serverRequest(url, method, {}, headers);\n    return response;\n}\n\nexport const getAllJobs = async (inputData,token)=>{\n    const method = 'GET';\n    const url = BASE_URI+'posts/';\n    const headers = {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n    };\n    const response = await serverRequest(url, method, inputData, headers);\n    return response;\n}\n\nexport const jobRequest = async(inputData,token,endpoint,method)=>{\n    const url = BASE_URI+endpoint;\n    const headers = {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n    };\n    const response = await serverRequest(url, method, inputData, headers);\n    return response;\n}\n\n\nexport const uploadResume = async(inputData,token,endpoint)=>{\n    const url = BASE_URI+endpoint;\n    const method = 'POST';\n    const headers = {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${token}`\n    };\n    const response = await serverRequest(url, method, inputData, headers);\n    return response;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}